<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="_1b" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAGUAAABmCAYAAADS6F9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADZmlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNv
        bS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlw
        ZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1w
        TU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjM3NTRDQTlFRDUzRUUyMTE5MDJFQTgxMjZFMzBE
        NzY5IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjZDRDc1RDZENDExODExRTJCQTM1RTlFRDk2NjI4
        RUY4IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjZDRDc1RDZDNDExODExRTJCQTM1RTlFRDk2NjI4
        RUY4IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzYgKFdpbmRvd3MpIj4gPHhtcE1N
        OkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6Qjg5QkNFNzJFMTNFRTIxMTkwMkVB
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>